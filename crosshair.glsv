#ifdef GL_ES
precision mediump float;
#endif


#define PI 3.1415926

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

float easeInSine(float x) {
  return 1. - cos((x * PI) / 2.);
}

float circle(vec2 uv, vec2 center, float radius, float width){
    float d = length(center - uv);
    return smoothstep(d-0.01, d+0.001, radius) - smoothstep(d, d+0.01, radius-width);
}

float rectangle(vec2 uv, vec2 startPoint, vec2 endPoint){
    vec2 square = smoothstep(uv, uv+0.01, endPoint) * smoothstep(startPoint, startPoint+0.01, uv);
    return square.x * square.y;
}

float rectangle_borders(vec2 uv, vec2 startPoint, vec2 endPoint, float width){
    return rectangle(uv, startPoint, endPoint) - rectangle(uv, startPoint + width/2., endPoint - width/2.);
}

float beam(vec2 uv, vec2 center, float distFromCenter, float width, float angle_size){
    float angle = (atan(uv.y - center.y, uv.x - center.x)+PI)/(2.*PI) - 1. + angle_size;
    angle = clamp(angle,0.0,1.) * 1./angle_size;
    
    float beamCircle = circle(uv, center, distFromCenter, width) * angle;
    return beamCircle;
}

float star(vec2 uv, vec2 center, float lMin, float lMax){
    uv += sign(uv-center) * lMin;
    
    float teta = atan(uv.y- center.y, uv.x - center.x);
    float dist = distance(uv, center) - lMin;
    
    teta *= 4.;
    float star = clamp(cos(teta), 0., 1.) ; 
    
   	star *= 1.-smoothstep(lMax, 1., dist/lMax);
    return star;
}


void rotate(inout vec2 uv, vec2 center, float angle){
    uv -= center;
    mat2 m = mat2(cos(angle), -sin(angle),
                 sin(angle), cos(angle));
    uv *= m;
    uv += center;
}


float squares_circle(vec2 uv, vec2 center, vec2 squareSize, const int nbSquares, float distFromCenter){
    rotate(uv, center, -u_time*0.5);
    float teta = atan(uv.y - center.y, uv.x - center.x);
    teta = (teta+PI)/(2.*PI);
    rotate(uv, center, u_time*0.5);

    float rec = 0.;
    
    for(int i = 0; i < 50; i++){
        rotate(uv, center, 2.*PI/float(nbSquares));
        rec += rectangle(uv, vec2(0.5 -squareSize.x/2. + distFromCenter, 0.5-squareSize.y/2.), 
                          vec2(0.5 + squareSize.x/2. + distFromCenter , 0.5+squareSize.y/2.)) ;
        
        if(i >= nbSquares)
            break;
    }


    return rec * easeInSine(teta);
}

void main() {
    vec2 st = gl_FragCoord.xy/u_resolution.xy;
    st.x *= u_resolution.x/u_resolution.y;

    vec3 color = vec3(0.);
        
    // Outer circle
    rotate(st, vec2(0.5), mod(u_time/6., PI));
    float rectangle_rm = rectangle(st, vec2(0, 0.4), vec2(1.,0.6));
    float outerCircle = clamp(circle(st, vec2(0.5), 0.4, 0.001)  - rectangle_rm, 0., 1.);
    
    
    // Outer Circle Edges
    rectangle_rm = rectangle(st, vec2(0.039, 0.402), vec2(0.96, 0.598));
    float rectangle_outside = rectangle(st, vec2(0.04,0.39), vec2(0.96,0.61)); 
    rectangle_outside = clamp(rectangle_outside - rectangle_rm, 0., 1.);
    rectangle_rm = rectangle(st, vec2(0.113, 0.39), vec2(0.887, 0.61));
    rectangle_outside = clamp(rectangle_outside - rectangle_rm, 0., 1.);
    outerCircle = max(outerCircle, rectangle_outside);
    
    color += outerCircle * vec3(0.2,0.7,1.);
    rotate(st, vec2(0.5), mod(-u_time/6., PI));
    
    
    // Inner circle
    rotate(st, vec2(0.5), mod(-u_time/10., PI));
    rectangle_rm = rectangle(st, vec2(0, 0.4), vec2(1.,0.6));
    float innerCircle = clamp(circle(st, vec2(0.5),0.15,0.001) - rectangle_rm, 0., 1.);
    rotate(st, vec2(0.5), mod(u_time/10., PI));
    color += innerCircle * vec3(0.2,0.7,1.);
    
    
    // Red beams
    float time_angle = (cos(mod(u_time,2.*PI)) +1.)/3.;
    rotate(st, vec2(0.5), 2.*PI/3. + time_angle );
    color += beam(st, vec2(0.5), 0.35, 0.05, 0.25) * vec3(1.,0.,0.);
    rotate(st, vec2(0.5), -(2.*PI/3. + time_angle));  
    
    time_angle = (cos(mod(u_time,2.*PI)) +1.)/3.;
    rotate(st, vec2(0.5), PI/3. - time_angle);
    color += beam(vec2(st.x, 1.-st.y), vec2(0.5), 0.35, 0.05, 0.25) * vec3(1.,0.,0.);
    rotate(st, vec2(0.5), -(PI/3. - time_angle));  
    
    // Center
    color += circle(st, vec2(0.5), 0.005, 0.1) * vec3(1.,0.,0.);
    
    // Middle star
    color += star(st, vec2(0.5), 0.013 + (sin(u_time*3.)+1.)/2.*0.013, 0.15 + 
                  (sin(u_time*3.)+1.)/2.*0.015)  * vec3(1.,0.,0.);
    
    
    // Blue squares
    color += squares_circle(st, vec2(0.5), vec2(0.1,0.05), 20, 0.225) * vec3(0.2,0.7,1.);
    
    
    
    if(color != vec3(0.)){
        gl_FragColor = vec4(color,1.0);
    	return;
    }
      
    // Background TODO
    
    gl_FragColor = vec4(color,1.0);
}